<div id="App">
  {{> topbar embedded=embedded }}
  {{~> left-pane app='#App' ~}}
  {{> right-pane app='#App' }}

  <div id="convert-dialog" class="hidden">
    <img src="/img/rocket-launch.png">
    <h2>Convert to 2.0.0</h2>
    <p>Your document is using an old version of AsyncAPI. The playground only supports 2.0.0 and above. Convert your
      document to continue.</p>
    <div>
      {{>button button=true class="js-convert" style="margin-left:0;color:white;font-size:16px;padding:10px 15px;font-weight:normal;" text='Convert now' primary=true}}
    </div>
  </div>
</div>

<style>
#convert-dialog {
  position: fixed;
  left: calc(50% - 240px);
  top: calc(50% - 300px);
  width: 480px;
  background: white;
  padding: 40px;
  text-align: center;
  box-shadow: #333 0 0 20px;
  transition: .5s ease-in-out;
  z-index: 100;
}
#convert-dialog.hidden {
  top: -800px;
}
#convert-dialog img {
  margin-top: 20px;
  width: 300px;
}
#convert-dialog h2 {
  margin-top: 0;
}
#convert-dialog p {
  font-size: 14px;
  margin-bottom: 20px;
  color: #777;
}
</style>

<script>
  window.addEventListener('load', () => {
    const App = document.getElementById('App');

    const state = {
      code: null,
      url: null,
      template: 'html',
    };

    function generate() {
      superagent
        .post(`/${state.template}/generate`)
        .send(state.code)
        .set('Accept', 'text/plain')
        .set('Content-Type', 'text/plain')
        .set('x-asyncapi-base-url', state.url)
        .end((err, res) => {
          if (err) {
            if (res.body && res.body.code === 'old-version') {
              const convertDialog = document.getElementById('convert-dialog');
              convertDialog.classList.remove('hidden');
            } else {
              const errorsEl = document.getElementById('document-errors');
              const errorWrapperEl = document.querySelector('.errors-wrapper');

              function getErrorsHTMLFrom(res) {
                if (res.body.detail && res.body.code === 'bad indentation') {
                  return res.body.detail;
                }

                if (res.body.validationErrors) {
                  const errorsSimplified = res.body.validationErrors.map(error => `${error.title} on line ${error.location.startLine}, column ${error.location.startColumn}`);
                  return JSON.stringify(errorsSimplified, null, 2);
                }

                return res.body.message;
              }

              errorsEl.innerHTML = getErrorsHTMLFrom(res);
              errorWrapperEl.classList.remove('errors-wrapper--old-version');
              errorWrapperEl.classList.remove('errors-wrapper--hidden');
            }
            return;
          } else {
            const errorsEl = document.getElementById('document-errors');
            errorsEl.innerHTML = '';
          }

          var result = res.text;

          document.querySelector('.errors-wrapper').classList.add('errors-wrapper--hidden');
          document.getElementById('result').contentWindow.postMessage({
            eventName: 'content',
            content: result,
          }, '*');

          try {
            localStorage.setItem('doc-v2', state.code);
            localStorage.setItem('result-v2', result);
          } catch (e) {
            console.error('Could not store result in localStorage.');
            console.error(e);
          }
        });
    }

    function loadAsyncApi(asyncApiUrl) {
      fetch(asyncApiUrl)
        .then(function (response) {
          if (!response.ok) throw new Error(response.statusText);
          return response.text();
        })
        .then(function (doc) {
          App.dispatchEvent(new CustomEvent('updateCode', { detail: doc }));
        })
        .catch(console.error);
    }

    const urlParams = new URLSearchParams(window.location.search);
    const asyncApiUrl = urlParams.get('load') || urlParams.get('url');

    if (asyncApiUrl) {
      document.getElementById('fetch-document-url').value = asyncApiUrl;
      loadAsyncApi(asyncApiUrl);
    }

    App.addEventListener('templateChange', (e) => {
      state.template = e.detail;
      generate();
    });

    App.addEventListener('onCodeChange', (e) => {
      if (String(e.detail).trim().length) {
        state.code = e.detail;
        state.url = document.getElementById('fetch-document-url').value;
        generate();
      }
    });

    App.addEventListener('downloadDocs', () => {
      var form = document.createElement('form');
      form.setAttribute('method', 'post');
      form.setAttribute('action', `/${state.template}/download`);
      form.setAttribute('style', 'display: none;');

      var text = document.createElement('textarea');
      text.setAttribute('name', 'data');
      text.value = state.code;
      form.appendChild(text);

      document.body.appendChild(form);

      form.submit();
    });

    document.querySelector('.js-convert').addEventListener('click', function () {
      superagent
        .post('/convert')
        .send(state.code)
        .set('Accept', 'text/plain')
        .set('Content-Type', 'text/plain')
        .end((err, res) => {
          if (err) {
            const errorsEl = document.getElementById('document-errors');
            const errorWrapperEl = document.querySelector('.errors-wrapper');

            errorsEl.innerHTML = res.body.message;
            errorWrapperEl.classList.remove('errors-wrapper--old-version');
            errorWrapperEl.classList.remove('errors-wrapper--hidden');
            return;
          }

          document.getElementById('convert-dialog').classList.add('hidden');
          App.dispatchEvent(new CustomEvent('updateCode', { detail: res.text }));
        });
    });
  });
</script>
