<div class="{{css.leftPane}}">
  <div class="{{css.leftPane}}__fetch-document">
    <form id="fetch-document" class="{{css.leftPane}}__fetch-document__row">
      <input required type="url" id="fetch-document-url" class="{{css.leftPane}}__fetch-document__input"
        placeholder="Type the URL of the AsyncAPI document to import...">
      {{>button button=true submit=true outline=true text='Import document' }}
    </form>
    <div id="fetch-document-error" class="{{css.leftPane}}__fetch-document__error"></div>
  </div>
{{#>code-mirror id='code' app=app}}
asyncapi: 2.0.0
info:
  title: Streetlights API
  version: '1.0.0'
  description: |
    The Smartylighting Streetlights API allows you to remotely manage the city lights.

    ### Check out its awesome features:

    * Turn a specific streetlight on/off ðŸŒƒ
    * Dim a specific streetlight ðŸ˜Ž
    * Receive real-time information about environmental lighting conditions ðŸ“ˆ
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

servers:
  production:
    url: api.streetlights.smartylighting.com:{port}
    protocol: mqtt
    description: Test broker
    variables:
      port:
        description: Secure connection (TLS) is available through port 8883.
        default: '1883'
        enum:
          - '1883'
          - '8883'
    security:
      - apiKey: []
      - supportedOauthFlows:
        - streetlights:on
        - streetlights:off
        - streetlights:dim
      - openIdConnectWellKnown: []

defaultContentType: application/json

channels:
  smartylighting/streetlights/1/0/event/{streetlightId}/lighting/measured:
    description: The topic on which measured values may be produced and consumed.
    parameters:
      streetlightId:
        $ref: '#/components/parameters/streetlightId'
    subscribe:
      summary: Receive information about environmental lighting conditions of a particular streetlight.
      operationId: receiveLightMeasurement
      traits:
        - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/lightMeasured'

  smartylighting/streetlights/1/0/action/{streetlightId}/turn/on:
    parameters:
      streetlightId:
        $ref: '#/components/parameters/streetlightId'
    publish:
      operationId: turnOn
      traits:
        - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/turnOnOff'

  smartylighting/streetlights/1/0/action/{streetlightId}/turn/off:
    parameters:
      streetlightId:
        $ref: '#/components/parameters/streetlightId'
    publish:
      operationId: turnOff
      traits:
        - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/turnOnOff'

  smartylighting/streetlights/1/0/action/{streetlightId}/dim:
    parameters:
      streetlightId:
        $ref: '#/components/parameters/streetlightId'
    publish:
      operationId: dimLight
      traits:
        - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/dimLight'

components:
  messages:
    lightMeasured:
      name: lightMeasured
      title: Light measured
      summary: Inform about environmental lighting conditions for a particular streetlight.
      contentType: application/json
      traits:
        - $ref: '#/components/messageTraits/commonHeaders'
      payload:
        $ref: "#/components/schemas/lightMeasuredPayload"
    turnOnOff:
      name: turnOnOff
      title: Turn on/off
      summary: Command a particular streetlight to turn the lights on or off.
      traits:
        - $ref: '#/components/messageTraits/commonHeaders'
      payload:
        $ref: "#/components/schemas/turnOnOffPayload"
    dimLight:
      name: dimLight
      title: Dim light
      summary: Command a particular streetlight to dim the lights.
      traits:
        - $ref: '#/components/messageTraits/commonHeaders'
      payload:
        $ref: "#/components/schemas/dimLightPayload"

  schemas:
    lightMeasuredPayload:
      type: object
      properties:
        lumens:
          type: integer
          minimum: 0
          description: Light intensity measured in lumens.
        sentAt:
          $ref: "#/components/schemas/sentAt"
    turnOnOffPayload:
      type: object
      properties:
        command:
          type: string
          enum:
            - on
            - off
          description: Whether to turn on or off the light.
        sentAt:
          $ref: "#/components/schemas/sentAt"
    dimLightPayload:
      type: object
      properties:
        percentage:
          type: integer
          description: Percentage to which the light should be dimmed to.
          minimum: 0
          maximum: 100
        sentAt:
          $ref: "#/components/schemas/sentAt"
    sentAt:
      type: string
      format: date-time
      description: Date and time when the message was sent.

  securitySchemes:
    apiKey:
      type: apiKey
      in: user
      description: Provide your API key as the user and leave the password empty.
    supportedOauthFlows:
      type: oauth2
      description: Flows to support OAuth 2.0
      flows:
        implicit:
          authorizationUrl: 'https://authserver.example/auth'
          scopes:
            'streetlights:on': Ability to switch lights on
            'streetlights:off': Ability to switch lights off
            'streetlights:dim': Ability to dim the lights
        password:
          tokenUrl: 'https://authserver.example/token'
          scopes:
            'streetlights:on': Ability to switch lights on
            'streetlights:off': Ability to switch lights off
            'streetlights:dim': Ability to dim the lights
        clientCredentials:
          tokenUrl: 'https://authserver.example/token'
          scopes:
            'streetlights:on': Ability to switch lights on
            'streetlights:off': Ability to switch lights off
            'streetlights:dim': Ability to dim the lights
        authorizationCode:
          authorizationUrl: 'https://authserver.example/auth'
          tokenUrl: 'https://authserver.example/token'
          refreshUrl: 'https://authserver.example/refresh'
          scopes:
            'streetlights:on': Ability to switch lights on
            'streetlights:off': Ability to switch lights off
            'streetlights:dim': Ability to dim the lights
    openIdConnectWellKnown:
      type: openIdConnect
      openIdConnectUrl: 'https://authserver.example/.well-known'

  parameters:
    streetlightId:
      description: The ID of the streetlight.
      schema:
        type: string

  messageTraits:
    commonHeaders:
      headers:
        type: object
        properties:
          my-app-header:
            type: integer
            minimum: 0
            maximum: 100

  operationTraits:
    kafka:
      bindings:
        kafka:
          clientId: my-app-id
{{/code-mirror}}
</div>
<div class="js-collapse-{{css.leftPane}} {{css.leftPane}}__collapser"></div>

<style>
.{{css.leftPane}} {
  display: flex;
  flex-direction: column;
  position: fixed;
  left: 0;
  top: 50px;
  width: 50%;
  bottom: 0;
  border-right: #607d8b 2px solid;
  background-color: #263238;
}

.{{css.leftPane}}--collapsed {
  width: 0;
}

.{{css.leftPane}}__collapser {
  position: absolute;
  top: 50%;
  left: calc(50% - 18px);
  background-color: #526975;
  padding: 7px 1px 10px 1px;
  font-size: 28px;
  border-radius: 3px 0 0 3px;
  color: white;
  cursor: pointer;
  z-index: 10;
}

.{{css.leftPane}}--collapsed + .{{css.leftPane}}__collapser {
  left: 0;
  border-radius: 0 3px 3px 0;
}

.{{css.leftPane}}__collapser::before {
  content: 'â€¹â€º'
}

.{{css.leftPane}}__fetch-document {
  padding: 13px 20px;
  margin-bottom: 10px;
  background-color: #526975;
  box-shadow: rgba(0,0,0,.75) 0 0 5px;
  z-index: 5;
}

.{{css.leftPane}}__fetch-document__row {
  display: flex;
}

.{{css.leftPane}}__fetch-document__input {
  flex: 1;
  font-size: 14px;
  padding-left: 5px;
  border: #fff 1px solid;
  outline: none;
}

.{{css.leftPane}}__fetch-document__error {
  display: none;
  margin-top: 10px;
  padding: 10px;
  background-color: #c1332f;
  color: white;
  text-align: center;
}

.{{css.leftPane}}__fetch-document__error--visible {
  display: block;
}
</style>

<script>
(() => {
  const App = document.querySelector('{{app}}');
  const ErrorPane = document.getElementById('fetch-document-error');
  const FetchInput = document.getElementById('fetch-document-url');
  const FetchForm = document.getElementById('fetch-document');

  document.querySelector('.js-collapse-{{css.leftPane}}').addEventListener('click', function () {
    document.querySelector('.{{css.leftPane}}').classList.toggle('{{css.leftPane}}--collapsed');
  });

  FetchInput.addEventListener('input', function (ev) {
    ErrorPane.classList.remove('{{css.leftPane}}__fetch-document__error--visible');
  });

  FetchForm.addEventListener('submit', function (ev) {
    ev.preventDefault();
    ErrorPane.classList.remove('{{css.leftPane}}__fetch-document__error--visible');

    fetch(FetchInput.value)
      .then(function (response) {
        if (!response.ok) throw new Error(response.statusText);
        return response.text();
      })
      .then(function (doc) {
        App.dispatchEvent(new CustomEvent('updateCode', { detail: doc }));
      })
      .catch(function (err) {
        ErrorPane.innerText = err;
        ErrorPane.classList.add('{{css.leftPane}}__fetch-document__error--visible');
        console.error(err);
      });
  });
})();
</script>
